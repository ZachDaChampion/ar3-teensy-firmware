/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_COBOT_RESPONSE_PB_H_INCLUDED
#define PB_COBOT_RESPONSE_PB_H_INCLUDED
#include <pb.h>
#include "errors.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _cobot_Response_ResponseType {
    cobot_Response_ResponseType_RESP_UNSPECIFIED_TYPE = 0,
    cobot_Response_ResponseType_RESP_ACK = 1,
    cobot_Response_ResponseType_RESP_ERROR = 2,
    cobot_Response_ResponseType_RESP_DONE = 3,
    cobot_Response_ResponseType_RESP_JOINTS = 4
} cobot_Response_ResponseType;

/* Struct definitions */
/* Acknowledges that the request was received and is not immediately rejected. This does not mean
 that an error will not occur later. */
typedef struct _cobot_Response_Ack {
    char dummy_field;
} cobot_Response_Ack;

/* Indicates that an error occurred while processing the request. No further responses will be
 sent for this request. */
typedef struct _cobot_Response_Error {
    /* The error code. */
    cobot_ErrorCode error_code;
    /* A human-readable description of the error. */
    pb_callback_t error_message;
} cobot_Response_Error;

/* Indicates that the request was completed successfully. No further responses will be sent for
 this request. */
typedef struct _cobot_Response_Done {
    char dummy_field;
} cobot_Response_Done;

/* The current joint positions. This is sent in response to a GET_JOINTS request. */
typedef struct _cobot_Response_Joints {
    /* The joint positions, mapped to the joint ID. */
    pb_callback_t positions;
} cobot_Response_Joints;

/* Any response sent by the COBOT. A response will never be sent unless it is responding to a
 request, and at least one response will always be sent for each request. Some requests may result
 in multiple responses being sent. The ID of the response will match the ID of the request it is
 responding to. */
typedef struct _cobot_Response {
    /* The message ID. This is used to match responses to requests. */
    uint32_t message_id;
    /* The response type. This determines the payload type. */
    cobot_Response_ResponseType response_type;
    pb_size_t which_payload;
    union {
        cobot_Response_Ack ack;
        cobot_Response_Error error;
        cobot_Response_Done done;
        cobot_Response_Joints joints;
    } payload;
} cobot_Response;

typedef struct _cobot_Response_Joints_PositionsEntry {
    uint32_t key;
    float value;
} cobot_Response_Joints_PositionsEntry;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _cobot_Response_ResponseType_MIN cobot_Response_ResponseType_RESP_UNSPECIFIED_TYPE
#define _cobot_Response_ResponseType_MAX cobot_Response_ResponseType_RESP_JOINTS
#define _cobot_Response_ResponseType_ARRAYSIZE ((cobot_Response_ResponseType)(cobot_Response_ResponseType_RESP_JOINTS+1))

#define cobot_Response_response_type_ENUMTYPE cobot_Response_ResponseType


#define cobot_Response_Error_error_code_ENUMTYPE cobot_ErrorCode





/* Initializer values for message structs */
#define cobot_Response_init_default              {0, _cobot_Response_ResponseType_MIN, 0, {cobot_Response_Ack_init_default}}
#define cobot_Response_Ack_init_default          {0}
#define cobot_Response_Error_init_default        {_cobot_ErrorCode_MIN, {{NULL}, NULL}}
#define cobot_Response_Done_init_default         {0}
#define cobot_Response_Joints_init_default       {{{NULL}, NULL}}
#define cobot_Response_Joints_PositionsEntry_init_default {0, 0}
#define cobot_Response_init_zero                 {0, _cobot_Response_ResponseType_MIN, 0, {cobot_Response_Ack_init_zero}}
#define cobot_Response_Ack_init_zero             {0}
#define cobot_Response_Error_init_zero           {_cobot_ErrorCode_MIN, {{NULL}, NULL}}
#define cobot_Response_Done_init_zero            {0}
#define cobot_Response_Joints_init_zero          {{{NULL}, NULL}}
#define cobot_Response_Joints_PositionsEntry_init_zero {0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define cobot_Response_Error_error_code_tag      1
#define cobot_Response_Error_error_message_tag   2
#define cobot_Response_Joints_positions_tag      1
#define cobot_Response_message_id_tag            1
#define cobot_Response_response_type_tag         2
#define cobot_Response_ack_tag                   3
#define cobot_Response_error_tag                 4
#define cobot_Response_done_tag                  5
#define cobot_Response_joints_tag                6
#define cobot_Response_Joints_PositionsEntry_key_tag 1
#define cobot_Response_Joints_PositionsEntry_value_tag 2

/* Struct field encoding specification for nanopb */
#define cobot_Response_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FIXED32,  message_id,        1) \
X(a, STATIC,   SINGULAR, UENUM,    response_type,     2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,ack,payload.ack),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,error,payload.error),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,done,payload.done),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,joints,payload.joints),   6)
#define cobot_Response_CALLBACK NULL
#define cobot_Response_DEFAULT NULL
#define cobot_Response_payload_ack_MSGTYPE cobot_Response_Ack
#define cobot_Response_payload_error_MSGTYPE cobot_Response_Error
#define cobot_Response_payload_done_MSGTYPE cobot_Response_Done
#define cobot_Response_payload_joints_MSGTYPE cobot_Response_Joints

#define cobot_Response_Ack_FIELDLIST(X, a) \

#define cobot_Response_Ack_CALLBACK NULL
#define cobot_Response_Ack_DEFAULT NULL

#define cobot_Response_Error_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    error_code,        1) \
X(a, CALLBACK, SINGULAR, STRING,   error_message,     2)
#define cobot_Response_Error_CALLBACK pb_default_field_callback
#define cobot_Response_Error_DEFAULT NULL

#define cobot_Response_Done_FIELDLIST(X, a) \

#define cobot_Response_Done_CALLBACK NULL
#define cobot_Response_Done_DEFAULT NULL

#define cobot_Response_Joints_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  positions,         1)
#define cobot_Response_Joints_CALLBACK pb_default_field_callback
#define cobot_Response_Joints_DEFAULT NULL
#define cobot_Response_Joints_positions_MSGTYPE cobot_Response_Joints_PositionsEntry

#define cobot_Response_Joints_PositionsEntry_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   key,               1) \
X(a, STATIC,   SINGULAR, FLOAT,    value,             2)
#define cobot_Response_Joints_PositionsEntry_CALLBACK NULL
#define cobot_Response_Joints_PositionsEntry_DEFAULT NULL

extern const pb_msgdesc_t cobot_Response_msg;
extern const pb_msgdesc_t cobot_Response_Ack_msg;
extern const pb_msgdesc_t cobot_Response_Error_msg;
extern const pb_msgdesc_t cobot_Response_Done_msg;
extern const pb_msgdesc_t cobot_Response_Joints_msg;
extern const pb_msgdesc_t cobot_Response_Joints_PositionsEntry_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define cobot_Response_fields &cobot_Response_msg
#define cobot_Response_Ack_fields &cobot_Response_Ack_msg
#define cobot_Response_Error_fields &cobot_Response_Error_msg
#define cobot_Response_Done_fields &cobot_Response_Done_msg
#define cobot_Response_Joints_fields &cobot_Response_Joints_msg
#define cobot_Response_Joints_PositionsEntry_fields &cobot_Response_Joints_PositionsEntry_msg

/* Maximum encoded size of messages (where known) */
/* cobot_Response_size depends on runtime parameters */
/* cobot_Response_Error_size depends on runtime parameters */
/* cobot_Response_Joints_size depends on runtime parameters */
#define cobot_Response_Ack_size                  0
#define cobot_Response_Done_size                 0
#define cobot_Response_Joints_PositionsEntry_size 11

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
