// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_COBOTMSGS_H_
#define FLATBUFFERS_GENERATED_MAIN_COBOTMSGS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "_errors_generated.h"
#include "_log_generated.h"
#include "_request_generated.h"
#include "_response_generated.h"

namespace CobotMsgs {

enum CobotMessage : uint8_t {
  CobotMessage_NONE = 0,
  CobotMessage_Request = 1,
  CobotMessage_Response = 2,
  CobotMessage_LogMessage = 3,
  CobotMessage_MIN = CobotMessage_NONE,
  CobotMessage_MAX = CobotMessage_LogMessage
};

inline const CobotMessage (&EnumValuesCobotMessage())[4] {
  static const CobotMessage values[] = {
    CobotMessage_NONE,
    CobotMessage_Request,
    CobotMessage_Response,
    CobotMessage_LogMessage
  };
  return values;
}

inline const char * const *EnumNamesCobotMessage() {
  static const char * const names[5] = {
    "NONE",
    "Request",
    "Response",
    "LogMessage",
    nullptr
  };
  return names;
}

inline const char *EnumNameCobotMessage(CobotMessage e) {
  if (::flatbuffers::IsOutRange(e, CobotMessage_NONE, CobotMessage_LogMessage)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCobotMessage()[index];
}

template<typename T> struct CobotMessageTraits {
  static const CobotMessage enum_value = CobotMessage_NONE;
};

template<> struct CobotMessageTraits<CobotMsgs::Request::Request> {
  static const CobotMessage enum_value = CobotMessage_Request;
};

template<> struct CobotMessageTraits<CobotMsgs::Response::Response> {
  static const CobotMessage enum_value = CobotMessage_Response;
};

template<> struct CobotMessageTraits<CobotMsgs::LogMessage> {
  static const CobotMessage enum_value = CobotMessage_LogMessage;
};

bool VerifyCobotMessage(::flatbuffers::Verifier &verifier, const void *obj, CobotMessage type);
bool VerifyCobotMessageVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

inline bool VerifyCobotMessage(::flatbuffers::Verifier &verifier, const void *obj, CobotMessage type) {
  switch (type) {
    case CobotMessage_NONE: {
      return true;
    }
    case CobotMessage_Request: {
      auto ptr = reinterpret_cast<const CobotMsgs::Request::Request *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case CobotMessage_Response: {
      auto ptr = reinterpret_cast<const CobotMsgs::Response::Response *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case CobotMessage_LogMessage: {
      auto ptr = reinterpret_cast<const CobotMsgs::LogMessage *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyCobotMessageVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyCobotMessage(
        verifier,  values->Get(i), types->GetEnum<CobotMessage>(i))) {
      return false;
    }
  }
  return true;
}

}  // namespace CobotMsgs

#endif  // FLATBUFFERS_GENERATED_MAIN_COBOTMSGS_H_
