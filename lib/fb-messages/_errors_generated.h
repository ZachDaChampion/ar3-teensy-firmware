// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ERRORS_COBOTMSGS_H_
#define FLATBUFFERS_GENERATED_ERRORS_COBOTMSGS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace CobotMsgs {

enum ErrorCode : int8_t {
  ErrorCode_OTHER = 0,
  ErrorCode_MALFORMED_REQUEST = 1,
  ErrorCode_OUT_OF_RANGE = 2,
  ErrorCode_INVALID_JOINT = 3,
  ErrorCode_NOT_INITIALIZED = 4,
  ErrorCode_NOT_CALIBRATED = 5,
  ErrorCode_CANCELLED = 6,
  ErrorCode_INVALID_FIRMWARE_VERSION = 7,
  ErrorCode_MIN = ErrorCode_OTHER,
  ErrorCode_MAX = ErrorCode_INVALID_FIRMWARE_VERSION
};

inline const ErrorCode (&EnumValuesErrorCode())[8] {
  static const ErrorCode values[] = {
    ErrorCode_OTHER,
    ErrorCode_MALFORMED_REQUEST,
    ErrorCode_OUT_OF_RANGE,
    ErrorCode_INVALID_JOINT,
    ErrorCode_NOT_INITIALIZED,
    ErrorCode_NOT_CALIBRATED,
    ErrorCode_CANCELLED,
    ErrorCode_INVALID_FIRMWARE_VERSION
  };
  return values;
}

inline const char * const *EnumNamesErrorCode() {
  static const char * const names[9] = {
    "OTHER",
    "MALFORMED_REQUEST",
    "OUT_OF_RANGE",
    "INVALID_JOINT",
    "NOT_INITIALIZED",
    "NOT_CALIBRATED",
    "CANCELLED",
    "INVALID_FIRMWARE_VERSION",
    nullptr
  };
  return names;
}

inline const char *EnumNameErrorCode(ErrorCode e) {
  if (::flatbuffers::IsOutRange(e, ErrorCode_OTHER, ErrorCode_INVALID_FIRMWARE_VERSION)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesErrorCode()[index];
}

}  // namespace CobotMsgs

#endif  // FLATBUFFERS_GENERATED_ERRORS_COBOTMSGS_H_
