// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOG_COBOTMSGS_H_
#define FLATBUFFERS_GENERATED_LOG_COBOTMSGS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace CobotMsgs {

struct LogMessage;
struct LogMessageBuilder;

enum LogLevel : int8_t {
  LogLevel_DEBUG = 0,
  LogLevel_INFO = 1,
  LogLevel_WARN = 2,
  LogLevel_ERROR = 3,
  LogLevel_NONE = 4,
  LogLevel_MIN = LogLevel_DEBUG,
  LogLevel_MAX = LogLevel_NONE
};

inline const LogLevel (&EnumValuesLogLevel())[5] {
  static const LogLevel values[] = {
    LogLevel_DEBUG,
    LogLevel_INFO,
    LogLevel_WARN,
    LogLevel_ERROR,
    LogLevel_NONE
  };
  return values;
}

inline const char * const *EnumNamesLogLevel() {
  static const char * const names[6] = {
    "DEBUG",
    "INFO",
    "WARN",
    "ERROR",
    "NONE",
    nullptr
  };
  return names;
}

inline const char *EnumNameLogLevel(LogLevel e) {
  if (::flatbuffers::IsOutRange(e, LogLevel_DEBUG, LogLevel_NONE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLogLevel()[index];
}

struct LogMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LogMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LEVEL = 4,
    VT_MESSAGE = 6
  };
  CobotMsgs::LogLevel level() const {
    return static_cast<CobotMsgs::LogLevel>(GetField<int8_t>(VT_LEVEL, 0));
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_LEVEL, 1) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct LogMessageBuilder {
  typedef LogMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_level(CobotMsgs::LogLevel level) {
    fbb_.AddElement<int8_t>(LogMessage::VT_LEVEL, static_cast<int8_t>(level), 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(LogMessage::VT_MESSAGE, message);
  }
  explicit LogMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LogMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LogMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LogMessage> CreateLogMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    CobotMsgs::LogLevel level = CobotMsgs::LogLevel_DEBUG,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  LogMessageBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_level(level);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LogMessage> CreateLogMessageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    CobotMsgs::LogLevel level = CobotMsgs::LogLevel_DEBUG,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return CobotMsgs::CreateLogMessage(
      _fbb,
      level,
      message__);
}

}  // namespace CobotMsgs

#endif  // FLATBUFFERS_GENERATED_LOG_COBOTMSGS_H_
